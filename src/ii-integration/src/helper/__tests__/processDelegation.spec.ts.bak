import { describe, it, expect, vi, beforeEach } from 'vitest';
import { processDelegation } from '../processDelegation';
import { buildDelegationString } from '../buildDelegationString';
import { buildURIFragment } from '../buildURIFragment';
import { buildMiddleToAppDelegationChain } from '../buildMiddleToAppDelegationChain';
import { DelegationIdentity, DelegationChain } from '@dfinity/identity';
import { PublicKey } from '@dfinity/agent';

// Mock the helper functions
vi.mock('../buildDelegationString', () => ({
  buildDelegationString: vi.fn(),
}));

vi.mock('../buildURIFragment', () => ({
  buildURIFragment: vi.fn(),
}));

vi.mock('../buildMiddleToAppDelegationChain', () => ({
  buildMiddleToAppDelegationChain: vi.fn(),
}));

describe('processDelegation', () => {
  const mockDelegationIdentity = {
    sign: vi.fn(),
    getDelegation: vi.fn(),
  } as unknown as DelegationIdentity;

  const mockDelegationChain = {
    toJSON: vi.fn(),
  } as unknown as DelegationChain;

  const mockAppPublicKey = {
    toDer: vi.fn(),
  } as unknown as PublicKey;

  const mockDeepLink = 'https://example.com/';
  const mockDelegationString = 'mock-delegation-string';
  const mockUriFragment = 'delegation=mock-uri-fragment';
  const mockExpiration = new Date();

  // Mock DOM elements
  const mockLoginButton = {
    style: { display: '' },
  } as unknown as HTMLElement;
  const mockBackToAppButton = {
    style: { display: '' },
    addEventListener: vi.fn(),
  } as unknown as HTMLElement;

  beforeEach(() => {
    vi.clearAllMocks();
    (
      buildDelegationString as unknown as ReturnType<typeof vi.fn>
    ).mockReturnValue(mockDelegationString);
    (buildURIFragment as unknown as ReturnType<typeof vi.fn>).mockReturnValue(
      mockUriFragment,
    );
    (
      buildMiddleToAppDelegationChain as unknown as ReturnType<typeof vi.fn>
    ).mockResolvedValue(mockDelegationChain);
  });

  it('should use postMessage when in an iframe', async () => {
    // Mock iframe environment
    const mockPostMessage = vi.fn();
    const mockParent = { postMessage: mockPostMessage };
    const mockWindow = {
      parent: mockParent,
      open: vi.fn(),
    } as unknown as Window & typeof globalThis;

    await processDelegation({
      deepLink: mockDeepLink,
      middleDelegationIdentity: mockDelegationIdentity,
      appPublicKey: mockAppPublicKey,
      expiration: mockExpiration,
      window: mockWindow,
      iiLoginButton: mockLoginButton,
      backToAppButton: mockBackToAppButton,
    });

    expect(buildMiddleToAppDelegationChain).toHaveBeenCalledWith({
      middleDelegationIdentity: mockDelegationIdentity,
      appPublicKey: mockAppPublicKey,
      expiration: mockExpiration,
    });
    expect(buildDelegationString).toHaveBeenCalledWith(mockDelegationChain);
    expect(mockParent.postMessage).toHaveBeenCalledWith(
      {
        kind: 'success',
        delegation: mockDelegationString,
      },
      new URL(mockDeepLink).origin,
    );
  });

  it('should use URL redirection when not in an iframe', async () => {
    // Mock native app environment
    const mockOpen = vi.fn();
    const mockWindow = {
      parent: undefined,
      open: mockOpen,
    } as unknown as Window & typeof globalThis;

    await processDelegation({
      deepLink: mockDeepLink,
      middleDelegationIdentity: mockDelegationIdentity,
      appPublicKey: mockAppPublicKey,
      expiration: mockExpiration,
      window: mockWindow,
      iiLoginButton: mockLoginButton,
      backToAppButton: mockBackToAppButton,
    });

    expect(buildMiddleToAppDelegationChain).toHaveBeenCalledWith({
      middleDelegationIdentity: mockDelegationIdentity,
      appPublicKey: mockAppPublicKey,
      expiration: mockExpiration,
    });
    expect(buildURIFragment).toHaveBeenCalledWith(mockDelegationChain);
    expect(mockLoginButton.style.display).toBe('none');
    expect(mockBackToAppButton.style.display).toBe('block');
    expect(mockBackToAppButton.addEventListener).toHaveBeenCalledWith(
      'click',
      expect.any(Function),
    );

    // Simulate click event
    const clickCallback = (
      mockBackToAppButton.addEventListener as unknown as ReturnType<
        typeof vi.fn
      >
    ).mock.calls[0][1];
    clickCallback();
    expect(mockOpen).toHaveBeenCalledWith(
      `${mockDeepLink}#${mockUriFragment}`,
      '_self',
    );
  });
});
